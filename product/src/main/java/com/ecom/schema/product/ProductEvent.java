/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ecom.schema.product;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ProductEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8319678186395147574L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ProductEvent\",\"namespace\":\"com.ecom.schema.product\",\"fields\":[{\"name\":\"productId\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"productName\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"productPrice\",\"type\":[\"double\"]},{\"name\":\"categoryId\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"productStatus\",\"type\":{\"type\":\"enum\",\"name\":\"ProductStatusEnum.java\",\"symbols\":[\"CREATED\",\"UPDATED\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ProductEvent> ENCODER =
      new BinaryMessageEncoder<ProductEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ProductEvent> DECODER =
      new BinaryMessageDecoder<ProductEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ProductEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ProductEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ProductEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ProductEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ProductEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ProductEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ProductEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ProductEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.Object productId;
  private java.lang.String productName;
  private java.lang.Object productPrice;
  private java.lang.Object categoryId;
  private com.ecom.schema.product.ProductStatusEnum productStatus;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ProductEvent() {}

  /**
   * All-args constructor.
   * @param productId The new value for productId
   * @param productName The new value for productName
   * @param productPrice The new value for productPrice
   * @param categoryId The new value for categoryId
   * @param productStatus The new value for productStatus
   */
  public ProductEvent(java.lang.Object productId, java.lang.String productName, java.lang.Object productPrice, java.lang.Object categoryId, com.ecom.schema.product.ProductStatusEnum productStatus) {
    this.productId = productId;
    this.productName = productName;
    this.productPrice = productPrice;
    this.categoryId = categoryId;
    this.productStatus = productStatus;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return productId;
    case 1: return productName;
    case 2: return productPrice;
    case 3: return categoryId;
    case 4: return productStatus;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: productId = value$; break;
    case 1: productName = value$ != null ? value$.toString() : null; break;
    case 2: productPrice = value$; break;
    case 3: categoryId = value$; break;
    case 4: productStatus = (com.ecom.schema.product.ProductStatusEnum)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'productId' field.
   * @return The value of the 'productId' field.
   */
  public java.lang.Object getProductId() {
    return productId;
  }


  /**
   * Sets the value of the 'productId' field.
   * @param value the value to set.
   */
  public void setProductId(java.lang.Object value) {
    this.productId = value;
  }

  /**
   * Gets the value of the 'productName' field.
   * @return The value of the 'productName' field.
   */
  public java.lang.String getProductName() {
    return productName;
  }


  /**
   * Sets the value of the 'productName' field.
   * @param value the value to set.
   */
  public void setProductName(java.lang.String value) {
    this.productName = value;
  }

  /**
   * Gets the value of the 'productPrice' field.
   * @return The value of the 'productPrice' field.
   */
  public java.lang.Object getProductPrice() {
    return productPrice;
  }


  /**
   * Sets the value of the 'productPrice' field.
   * @param value the value to set.
   */
  public void setProductPrice(java.lang.Object value) {
    this.productPrice = value;
  }

  /**
   * Gets the value of the 'categoryId' field.
   * @return The value of the 'categoryId' field.
   */
  public java.lang.Object getCategoryId() {
    return categoryId;
  }


  /**
   * Sets the value of the 'categoryId' field.
   * @param value the value to set.
   */
  public void setCategoryId(java.lang.Object value) {
    this.categoryId = value;
  }

  /**
   * Gets the value of the 'productStatus' field.
   * @return The value of the 'productStatus' field.
   */
  public com.ecom.schema.product.ProductStatusEnum getProductStatus() {
    return productStatus;
  }


  /**
   * Sets the value of the 'productStatus' field.
   * @param value the value to set.
   */
  public void setProductStatus(com.ecom.schema.product.ProductStatusEnum value) {
    this.productStatus = value;
  }

  /**
   * Creates a new ProductEvent RecordBuilder.
   * @return A new ProductEvent RecordBuilder
   */
  public static com.ecom.schema.product.ProductEvent.Builder newBuilder() {
    return new com.ecom.schema.product.ProductEvent.Builder();
  }

  /**
   * Creates a new ProductEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ProductEvent RecordBuilder
   */
  public static com.ecom.schema.product.ProductEvent.Builder newBuilder(com.ecom.schema.product.ProductEvent.Builder other) {
    if (other == null) {
      return new com.ecom.schema.product.ProductEvent.Builder();
    } else {
      return new com.ecom.schema.product.ProductEvent.Builder(other);
    }
  }

  /**
   * Creates a new ProductEvent RecordBuilder by copying an existing ProductEvent instance.
   * @param other The existing instance to copy.
   * @return A new ProductEvent RecordBuilder
   */
  public static com.ecom.schema.product.ProductEvent.Builder newBuilder(com.ecom.schema.product.ProductEvent other) {
    if (other == null) {
      return new com.ecom.schema.product.ProductEvent.Builder();
    } else {
      return new com.ecom.schema.product.ProductEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for ProductEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ProductEvent>
    implements org.apache.avro.data.RecordBuilder<ProductEvent> {

    private java.lang.Object productId;
    private java.lang.String productName;
    private java.lang.Object productPrice;
    private java.lang.Object categoryId;
    private com.ecom.schema.product.ProductStatusEnum productStatus;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ecom.schema.product.ProductEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.productId)) {
        this.productId = data().deepCopy(fields()[0].schema(), other.productId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.productName)) {
        this.productName = data().deepCopy(fields()[1].schema(), other.productName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.productPrice)) {
        this.productPrice = data().deepCopy(fields()[2].schema(), other.productPrice);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.categoryId)) {
        this.categoryId = data().deepCopy(fields()[3].schema(), other.categoryId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.productStatus)) {
        this.productStatus = data().deepCopy(fields()[4].schema(), other.productStatus);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing ProductEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ecom.schema.product.ProductEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.productId)) {
        this.productId = data().deepCopy(fields()[0].schema(), other.productId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.productName)) {
        this.productName = data().deepCopy(fields()[1].schema(), other.productName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.productPrice)) {
        this.productPrice = data().deepCopy(fields()[2].schema(), other.productPrice);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.categoryId)) {
        this.categoryId = data().deepCopy(fields()[3].schema(), other.categoryId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.productStatus)) {
        this.productStatus = data().deepCopy(fields()[4].schema(), other.productStatus);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'productId' field.
      * @return The value.
      */
    public java.lang.Object getProductId() {
      return productId;
    }


    /**
      * Sets the value of the 'productId' field.
      * @param value The value of 'productId'.
      * @return This builder.
      */
    public com.ecom.schema.product.ProductEvent.Builder setProductId(java.lang.Object value) {
      validate(fields()[0], value);
      this.productId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'productId' field has been set.
      * @return True if the 'productId' field has been set, false otherwise.
      */
    public boolean hasProductId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'productId' field.
      * @return This builder.
      */
    public com.ecom.schema.product.ProductEvent.Builder clearProductId() {
      productId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'productName' field.
      * @return The value.
      */
    public java.lang.String getProductName() {
      return productName;
    }


    /**
      * Sets the value of the 'productName' field.
      * @param value The value of 'productName'.
      * @return This builder.
      */
    public com.ecom.schema.product.ProductEvent.Builder setProductName(java.lang.String value) {
      validate(fields()[1], value);
      this.productName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'productName' field has been set.
      * @return True if the 'productName' field has been set, false otherwise.
      */
    public boolean hasProductName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'productName' field.
      * @return This builder.
      */
    public com.ecom.schema.product.ProductEvent.Builder clearProductName() {
      productName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'productPrice' field.
      * @return The value.
      */
    public java.lang.Object getProductPrice() {
      return productPrice;
    }


    /**
      * Sets the value of the 'productPrice' field.
      * @param value The value of 'productPrice'.
      * @return This builder.
      */
    public com.ecom.schema.product.ProductEvent.Builder setProductPrice(java.lang.Object value) {
      validate(fields()[2], value);
      this.productPrice = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'productPrice' field has been set.
      * @return True if the 'productPrice' field has been set, false otherwise.
      */
    public boolean hasProductPrice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'productPrice' field.
      * @return This builder.
      */
    public com.ecom.schema.product.ProductEvent.Builder clearProductPrice() {
      productPrice = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'categoryId' field.
      * @return The value.
      */
    public java.lang.Object getCategoryId() {
      return categoryId;
    }


    /**
      * Sets the value of the 'categoryId' field.
      * @param value The value of 'categoryId'.
      * @return This builder.
      */
    public com.ecom.schema.product.ProductEvent.Builder setCategoryId(java.lang.Object value) {
      validate(fields()[3], value);
      this.categoryId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'categoryId' field has been set.
      * @return True if the 'categoryId' field has been set, false otherwise.
      */
    public boolean hasCategoryId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'categoryId' field.
      * @return This builder.
      */
    public com.ecom.schema.product.ProductEvent.Builder clearCategoryId() {
      categoryId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'productStatus' field.
      * @return The value.
      */
    public com.ecom.schema.product.ProductStatusEnum getProductStatus() {
      return productStatus;
    }


    /**
      * Sets the value of the 'productStatus' field.
      * @param value The value of 'productStatus'.
      * @return This builder.
      */
    public com.ecom.schema.product.ProductEvent.Builder setProductStatus(com.ecom.schema.product.ProductStatusEnum value) {
      validate(fields()[4], value);
      this.productStatus = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'productStatus' field has been set.
      * @return True if the 'productStatus' field has been set, false otherwise.
      */
    public boolean hasProductStatus() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'productStatus' field.
      * @return This builder.
      */
    public com.ecom.schema.product.ProductEvent.Builder clearProductStatus() {
      productStatus = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ProductEvent build() {
      try {
        ProductEvent record = new ProductEvent();
        record.productId = fieldSetFlags()[0] ? this.productId :  defaultValue(fields()[0]);
        record.productName = fieldSetFlags()[1] ? this.productName : (java.lang.String) defaultValue(fields()[1]);
        record.productPrice = fieldSetFlags()[2] ? this.productPrice :  defaultValue(fields()[2]);
        record.categoryId = fieldSetFlags()[3] ? this.categoryId :  defaultValue(fields()[3]);
        record.productStatus = fieldSetFlags()[4] ? this.productStatus : (com.ecom.schema.product.ProductStatusEnum) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ProductEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<ProductEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ProductEvent>
    READER$ = (org.apache.avro.io.DatumReader<ProductEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










